x-def-logging: &default-logging
  logging:
    driver: "loki"
    options:
      loki-url: "http://localhost:3100/loki/api/v1/push"
      loki-batch-size: "100"
      loki-retries: 2
      loki-max-backoff: 1000ms
      loki-timeout: 1s

services:
  etcd1: &etcd
    image: patroni
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: tutorial
      ETCD_UNSUPPORTED_ARCH: arm64
    container_name: demo-etcd1
    hostname: etcd1
    <<: *default-logging
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
    <<: *etcd
    container_name: demo-etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  etcd3:
    <<: *etcd
    container_name: demo-etcd3
    hostname: etcd3
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380

  haproxy-database:
    image: patroni
    env_file: database/.env
    hostname: haproxy
    container_name: demo-haproxy
    command: haproxy
    <<: *default-logging
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: demo

  patroni1:
    image: patroni
    env_file: database/.env
    hostname: patroni1
    container_name: demo-patroni1
    <<: *default-logging
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1

  patroni2:
    image: patroni
    env_file: database/.env
    hostname: patroni2
    container_name: demo-patroni2
    <<: *default-logging
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2

  patroni3:
    image: patroni
    env_file: database/.env
    hostname: patroni3
    container_name: demo-patroni3
    <<: *default-logging
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni3

  redis:
    image: redis:7.4.0
    ports:
      - "6379:6379"


  rabbitmq:
    image: rabbitmq:3.9.7-management
    <<: *default-logging
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  server: &server
    restart: always
    <<: *default-logging
    build:
      context: ./e-commerce/
    env_file:
      - ./e-commerce/.env
    depends_on:
      - haproxy-database
    volumes:
      - static-volume:/app/var/static
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 50M
        limits:
          cpus: '1'
          memory: 100M

  celery-worker:
    <<: *server
    command: celery -A config worker -l info
    deploy:
      replicas: 5

  server2:
    <<: *server
    ports:
      - "8000:8000"

  server3:
    <<: *server

  nginx:
    image: nginx:1.21.3-alpine
    <<: *default-logging
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static-volume:/app/var/static
    ports:
      - "80:80"
    depends_on:
      - server
      - server2
      - server3

  grafana:
    container_name: "grafana"
    restart: unless-stopped
    user: "0"
    image: grafana/grafana-enterprise
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    environment:
      - TERM=linux
      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-polystat-panel
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - TZ=Asia/Almaty

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.54.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"

  loki:
    hostname: loki
    image: grafana/loki:latest
    environment:
      TZ: "Almaty/Asia"
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/retention-config.yaml
    volumes:
      - ./monitoring/loki/config.yaml:/etc/loki/retention-config.yaml

volumes:
  static-volume:
  prometheus_data:
  grafana-data: